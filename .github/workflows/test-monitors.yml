name: Test All Monitors

on:
  workflow_dispatch:
    inputs:
      send_email:
        description: 'Send test email alerts'
        required: false
        type: boolean
        default: false

jobs:
  test-monitors:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 python-dotenv cloudscraper lxml
    
    - name: Verify Configuration
      run: |
        echo "üîç Verifying monitor configuration..."
        echo ""
        echo "üìã Target Screens (3 total, Felicity Mall removed):"
        grep "target_screens = \[" bookmyshow_*.py -A 3 | grep -E '"PVR' | sort -u
        echo ""
        echo "‚úÖ Configuration verified"
    
    - name: Test CloudScraper Monitor
      env:
        EMAIL_FROM: ${{ inputs.send_email && secrets.EMAIL_FROM || 'test@example.com' }}
        EMAIL_TO: ${{ inputs.send_email && secrets.EMAIL_TO || 'test@example.com' }}
        EMAIL_PASSWORD: ${{ inputs.send_email && secrets.EMAIL_PASSWORD || 'test123' }}
      run: |
        echo "="
        echo "üß™ TEST 1: CloudScraper Monitor"
        echo "="
        python bookmyshow_cloudscraper.py || echo "Exit code: $?"
        echo ""
      continue-on-error: true
    
    - name: Test Basic Monitor
      env:
        EMAIL_FROM: ${{ inputs.send_email && secrets.EMAIL_FROM || 'test@example.com' }}
        EMAIL_TO: ${{ inputs.send_email && secrets.EMAIL_TO || 'test@example.com' }}
        EMAIL_PASSWORD: ${{ inputs.send_email && secrets.EMAIL_PASSWORD || 'test123' }}
      run: |
        echo "="
        echo "üß™ TEST 2: Basic Monitor"
        echo "="
        timeout 20s python bookmyshow_monitor.py --once || echo "Exit code: $?"
        echo ""
      continue-on-error: true
    
    - name: Test Enhanced Monitor
      env:
        EMAIL_FROM: ${{ inputs.send_email && secrets.EMAIL_FROM || 'test@example.com' }}
        EMAIL_TO: ${{ inputs.send_email && secrets.EMAIL_TO || 'test@example.com' }}
        EMAIL_PASSWORD: ${{ inputs.send_email && secrets.EMAIL_PASSWORD || 'test123' }}
      run: |
        echo "="
        echo "üß™ TEST 3: Enhanced Monitor"
        echo "="
        timeout 20s python bookmyshow_monitor_enhanced.py --once || echo "Exit code: $?"
        echo ""
      continue-on-error: true
    
    - name: Test Proxy Monitor
      env:
        EMAIL_FROM: ${{ inputs.send_email && secrets.EMAIL_FROM || 'test@example.com' }}
        EMAIL_TO: ${{ inputs.send_email && secrets.EMAIL_TO || 'test@example.com' }}
        EMAIL_PASSWORD: ${{ inputs.send_email && secrets.EMAIL_PASSWORD || 'test123' }}
      run: |
        echo "="
        echo "üß™ TEST 4: Proxy Monitor"
        echo "="
        timeout 20s python bookmyshow_proxy.py || echo "Exit code: $?"
        echo ""
      continue-on-error: true
    
    - name: Run Test Suite
      env:
        EMAIL_FROM: ${{ inputs.send_email && secrets.EMAIL_FROM || 'test@example.com' }}
        EMAIL_TO: ${{ inputs.send_email && secrets.EMAIL_TO || 'test@example.com' }}
        EMAIL_PASSWORD: ${{ inputs.send_email && secrets.EMAIL_PASSWORD || 'test123' }}
      run: |
        echo "="
        echo "üß™ COMPREHENSIVE TEST SUITE"
        echo "="
        python test_monitors.py || true
    
    - name: Summary
      if: always()
      run: |
        echo "="
        echo "üìä TEST SUMMARY"
        echo "="
        echo "‚úÖ All monitors tested"
        echo "‚úÖ Configuration verified (3 PVR screens, no Felicity Mall)"
        echo ""
        echo "üí° NEXT STEPS:"
        echo "1. Check the logs above for any 200 status codes"
        echo "2. If you see 403 errors, that's expected - BookMyShow blocks bots"
        echo "3. CloudScraper usually works best for bypassing protection"
        echo "4. Use the simple workflow for production monitoring"
        echo ""
        if [ "${{ inputs.send_email }}" = "true" ]; then
          echo "üìß Email alerts were enabled - check your inbox"
        else
          echo "üìß Email alerts were disabled for this test"
        fi